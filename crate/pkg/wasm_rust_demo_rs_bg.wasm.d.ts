/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function filter(a: number, b: number, c: number): void;
export function lofi(a: number): void;
export function pastel_pink(a: number): void;
export function golden(a: number): void;
export function cali(a: number): void;
export function firenze(a: number): void;
export function inc_brightness(a: number, b: number): void;
export function adjust_contrast(a: number, b: number): void;
export function __wbg_prettierimage_free(a: number): void;
export function prettierimage_new(a: number, b: number, c: number, d: number): number;
export function prettierimage_get_width(a: number): number;
export function prettierimage_get_raw_pixels(a: number, b: number): void;
export function prettierimage_get_height(a: number): number;
export function __wbg_rgb_free(a: number): void;
export function rgb_new(a: number, b: number, c: number): number;
export function rgba_new(a: number, b: number, c: number, d: number): number;
export function run(a: number): void;
export function get_image_data(a: number, b: number): number;
export function putImageData(a: number, b: number, c: number): void;
export function open_image(a: number, b: number): number;
export function to_raw_pixels(a: number, b: number): void;
export function __wbg_rgba_free(a: number): void;
export function lch(a: number, b: number, c: number, d: number): void;
export function hsl(a: number, b: number, c: number, d: number): void;
export function hsv(a: number, b: number, c: number, d: number): void;
export function hue_rotate_hsl(a: number, b: number): void;
export function hue_rotate_hsv(a: number, b: number): void;
export function hue_rotate_lch(a: number, b: number): void;
export function saturate_hsl(a: number, b: number): void;
export function saturate_lch(a: number, b: number): void;
export function saturate_hsv(a: number, b: number): void;
export function lighten_lch(a: number, b: number): void;
export function lighten_hsl(a: number, b: number): void;
export function lighten_hsv(a: number, b: number): void;
export function darken_lch(a: number, b: number): void;
export function darken_hsl(a: number, b: number): void;
export function darken_hsv(a: number, b: number): void;
export function desaturate_hsv(a: number, b: number): void;
export function desaturate_hsl(a: number, b: number): void;
export function desaturate_lch(a: number, b: number): void;
export function mix_with_colour(a: number, b: number, c: number): void;
export function alter_channel(a: number, b: number, c: number): void;
export function alter_red_channel(a: number, b: number): void;
export function alter_green_channel(a: number, b: number): void;
export function alter_blue_channel(a: number, b: number): void;
export function alter_channels(a: number, b: number, c: number, d: number): void;
export function remove_channel(a: number, b: number, c: number): void;
export function remove_red_channel(a: number, b: number): void;
export function remove_green_channel(a: number, b: number): void;
export function remove_blue_channel(a: number, b: number): void;
export function swap_channels(a: number, b: number, c: number): void;
export function invert(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
